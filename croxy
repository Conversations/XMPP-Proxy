#!/usr/bin/env lua

--- Create global proxy object
local croxy = { }
_G.croxy = croxy

local log
local events
local server
local socket
local datamanager

--
-- Loading functions for setup
--
local function load_luarocks()
  --- load luarocks, for development we need this
  --- to get all modules
  pcall(require, "luarocks.loader")
end

local function load_libraries()
    ---
    -- Load all the modules here, because
    -- globals will be locked later and
    -- therefore disallow loading
    ---

	socket = require "socket"
	server = require "net.server"
	datamanager = require "util.datamanager"

    require "ssl"
	require "util.xmppstream"
	require "util.random_string"
	require "util.datetime"
	require "util.serialization"
	require "util.jid"
	require "util.traverse"
	require "core.sessionmanager"
	require "net.xmppclient_listener"
	require "net.xmppserver_listener"
end

local function load_events()
  local events = require("util.events")
  _G.croxy.events = events.new()
end

local function load_logging()
  require("core.loggingmanager")
end

local function setup_xmppclient()
  local xmppclient_listener = require "net.xmppclient_listener"
  
  server.addserver("*", 5000, xmppclient_listener, "*a", false, false)
end

local function seed_random()
  math.randomseed( tonumber(tostring(os.time()):reverse():sub(1,6)) )
end

local function load_config()
  ---
  -- Create an config table
  ---
  croxy.config = {}
  local defaults = {}
  
  ---
  -- Fill in defaults
  ---
  defaults["interface"] = "*" -- Bind on all interfaces
  defaults["port"] = 5000
  defaults["host"] = "xmpp-proxy.conversations.im" -- The name of this croxy. Is used as JID to address it.
  defaults["require-client-encryption"] = true -- Only accept connections encrypted via tls
  defaults["client-tls-disabled"] = false

  croxy.events.fire_event("register-config-defaults", defaults)

  ---
  -- Load config
  ---
  local c, err = loadfile("config.conf")
  if c ~= nil then
    setfenv(c, croxy.config)
    c()
  end

  datamanager.set_data_path('./data')
  
  ---
  -- Make the config imutable and
  -- complain about access to none-existent variables
  ---
  
  setmetatable(defaults, {
    __index = function (t, k)
      log("warn", "%s", debug.traceback("Attempt to access non-existent config var '"..tostring(k).."'", 2))
    end 
  }) 
  
  setmetatable(croxy.config, {
    __index = defaults,
  	__newindex = function (t, k, v)
  	  error("Attempt to set a new config var: "..tostring(k).." = "..tostring(v), 2)
  	end
  })

  croxy.events.fire_event("validate-config", croxy.config)
  
end

local function load_modules()
  require "modules.mod_tls"
  require "modules.mod_xmpp_proxy"
  require "modules.mod_notifications"
  require "modules.mod_streammanagement"
  require "modules.mod_keepalive"
end

---
-- Stolen from prosody
---
local function init_global_protection()
	-- Catch global accesses
	local locked_globals_mt = {
		__index = function (t, k)
		  log("warn", "%s", debug.traceback("Attempt to read a non-existent global '"..tostring(k).."'", 2))
		end,
		__newindex = function (t, k, v)
		  error("Attempt to set a global: "..tostring(k).." = "..tostring(v), 2)
		end
	};
		
	function croxy.unlock_globals()
		setmetatable(_G, nil);
	end
	
	function croxy.lock_globals()
		setmetatable(_G, locked_globals_mt);
	end

	-- And lock now...
	croxy.lock_globals();
end

---
--- Run functions
---
local function loop()
  ---
  -- Catch an interrupted error here
  -- and return quitting to end the loop.
  -- Otherwise wait a short period and try again
  ---
  local function catch_uncaught_error(err)
		if type(err) == "string" and err:match("interrupted!$") then
			return "quitting";
		end

        local traceback = debug.traceback();

		log("error", "Top-level error, please report:\n%s\n%s", tostring(err), tostring(traceback));
	end
	
	while select(2, xpcall(server.loop, catch_uncaught_error)) ~= "quitting" do
		socket.sleep(0.2);
	end
end

local function cleanup()
  log("info", "Proxy stopping.")
  events.fire_event('proxy-stopping')

  log("info", "Proxy stopped.")
  events.fire_event('proxy-stopped')
end

load_luarocks()
load_events()
load_libraries()
load_logging()
load_modules()
load_config()

seed_random()

---
-- Set local variables, they'll be used in
-- functions called after now
---
log = croxy.log
events = croxy.events

init_global_protection()

log("info", "Starting proxy.")
events.fire_event('proxy-starting')

setup_xmppclient()

log("info", "Proxy started.")
events.fire_event('proxy-started')

loop()
cleanup()
